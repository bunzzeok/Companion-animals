"use client";

import { useState, useEffect, useCallback } from "react";
import { useSearchParams } from "next/navigation";
import Link from "next/link";
import {
  Heart,
  Search,
  Filter,
  MapPin,
  Clock,
  Eye,
  ChevronDown,
  Grid,
  List,
  ArrowLeft,
  MessageCircle,
} from "lucide-react";
import {
  petAPI,
  chatAPI,
  apiUtils,
  type Pet,
  type ApiResponse,
} from "../../lib/api";

// Search filters interface
interface SearchFilters {
  type?: string;
  age?: string;
  size?: string;
  gender?: string;
  city?: string;
  urgency?: string;
  search?: string;
  sortBy?: string;
  sortOrder?: string;
}

// Korean to English type mapping
const typeMapping: { [key: string]: string } = {
  고양이: "cat",
  강아지: "dog",
  토끼: "rabbit",
  새: "bird",
  기타: "other",
};

// Pet listing page component - Karrot Market style
export default function PetsPage() {
  const searchParams = useSearchParams();

  // State management for pets and UI
  const [pets, setPets] = useState<Pet[]>([]);
  const [loading, setLoading] = useState(true);
  const [viewMode, setViewMode] = useState<"grid" | "list">("grid");
  const [showFilters, setShowFilters] = useState(false);
  const [searchQuery, setSearchQuery] = useState("");

  // Pagination state
  const [currentPage, setCurrentPage] = useState(1);
  const [totalPages, setTotalPages] = useState(1);
  const [hasNextPage, setHasNextPage] = useState(false);

  // Filter state
  const [filters, setFilters] = useState<SearchFilters>({
    sortBy: "createdAt",
    sortOrder: "desc",
  });

  // Parse URL parameters and initialize filters
  useEffect(() => {
    const urlType = searchParams.get("type");
    const urlSearch = searchParams.get("search");
    const urlAge = searchParams.get("age");
    const urlSize = searchParams.get("size");
    const urlCity = searchParams.get("city");

    // Map Korean type to English
    const mappedType =
      urlType && typeMapping[urlType] ? typeMapping[urlType] : urlType;

    if (urlType || urlSearch || urlAge || urlSize || urlCity) {
      setFilters((prev) => ({
        ...prev,
        ...(mappedType && { type: mappedType }),
        ...(urlAge && { age: urlAge }),
        ...(urlSize && { size: urlSize }),
        ...(urlCity && { city: urlCity }),
      }));
    }

    if (urlSearch) {
      setSearchQuery(urlSearch);
    }
  }, [searchParams]);

  // Load pets data from API
  const loadPets = async (page = 1, resetData = false) => {
    try {
      setLoading(true);

      // Build query parameters
      const params = {
        page,
        limit: 12,
        ...filters,
      };

      if (searchQuery.trim()) {
        params.search = searchQuery.trim();
      }

      console.log("🔍 Loading pets with params:", params);

      // Make actual API call
      const response = await petAPI.getPets(params);

      if (apiUtils.isSuccess(response)) {
        const petsData = apiUtils.getData(response) || [];
        const pagination = apiUtils.getPagination(response);

        if (resetData || page === 1) {
          setPets(petsData);
        } else {
          setPets((prev) => [...prev, ...petsData]);
        }

        if (pagination) {
          setCurrentPage(pagination.currentPage);
          setTotalPages(pagination.totalPages);
          setHasNextPage(pagination.hasNextPage);
        }
      }
    } catch (error) {
      console.error("Failed to load pets:", error);

      // 오류 시 Mock 데이터로 폴백 (개발 중에만)
      if (process.env.NODE_ENV === "development") {
        const mockPets: Pet[] = Array.from({ length: 12 }, (_, index) => ({
          _id: `pet-${page}-${index}`,
          name: ["귀여운 고양이", "착한 강아지", "온순한 토끼", "예쁜 새"][
            index % 4
          ],
          type: ["cat", "dog", "other"][index % 3] as any,
          breed: ["코리안 숏헤어", "믹스견", "홀랜드 롭", "카나리아"][
            index % 4
          ],
          age: ["baby", "young", "adult", "senior"][index % 4] as any,
          gender: ["male", "female", "unknown"][index % 3] as any,
          size: ["small", "medium", "large"][index % 3] as any,
          color: ["검은색", "갈색", "흰색", "회색"][index % 4],
          weight: 3.5,
          healthStatus: "healthy",
          isVaccinated: true,
          isNeutered: index % 2 === 0,
          images: ["/placeholder-pet.jpg"],
          location: {
            city: "서울특별시",
            district: ["강남구", "서초구", "마포구", "성동구"][index % 4],
          },
          description:
            "건강하고 사람을 좋아하는 아이예요. 좋은 가정을 찾고 있습니다.",
          adoptionFee: index % 3 === 0 ? 0 : 50000,
          urgency: ["low", "medium", "high"][index % 3] as any,
          owner: {
            _id: `owner-${index}`,
            name: "분양자님",
            profileImage: "/placeholder-user.jpg",
          },
          views: Math.floor(Math.random() * 100),
          likes: [],
          likesCount: Math.floor(Math.random() * 20),
          isLiked: Math.random() > 0.5,
          status: "available",
          createdAt: new Date(
            Date.now() - Math.random() * 7 * 24 * 60 * 60 * 1000
          ).toISOString(),
          updatedAt: new Date().toISOString(),
        }));

        if (resetData || page === 1) {
          setPets(mockPets);
        } else {
          setPets((prev) => [...prev, ...mockPets]);
        }

        setCurrentPage(page);
        setTotalPages(5);
        setHasNextPage(page < 5);
      }
    } finally {
      setLoading(false);
    }
  };

  // Load pets on component mount and filter changes
  useEffect(() => {
    loadPets(1, true);
  }, [filters, searchQuery]);

  // Handle search input
  const handleSearch = (e: React.FormEvent) => {
    e.preventDefault();
    loadPets(1, true);
  };

  // Handle filter changes
  const handleFilterChange = (key: keyof SearchFilters, value: string) => {
    setFilters((prev) => ({
      ...prev,
      [key]: value === "all" ? undefined : value,
    }));
  };

  // Handle load more (infinite scroll simulation)
  const handleLoadMore = () => {
    if (hasNextPage && !loading) {
      loadPets(currentPage + 1, false);
    }
  };

  // Handle pet like toggle
  const handleToggleLike = async (petId: string, e: React.MouseEvent) => {
    e.preventDefault();
    e.stopPropagation();

    try {
      const response = await petAPI.toggleLike(petId);

      if (apiUtils.isSuccess(response)) {
        const result = apiUtils.getData(response);

        // Update local state
        setPets((prevPets) =>
          prevPets.map((pet) =>
            pet._id === petId
              ? {
                  ...pet,
                  isLiked: result.liked,
                  likesCount: result.count,
                }
              : pet
          )
        );
      }
    } catch (error) {
      console.error("Failed to toggle like:", error);
    }
  };

  // Handle starting a chat with pet owner
  const handleStartChat = async (
    petId: string,
    petName: string,
    e: React.MouseEvent
  ) => {
    e.preventDefault();
    e.stopPropagation();

    try {
      // Create or find existing chat room using the pet-specific endpoint
      const response = await chatAPI.createPetChatRoom(petId);

      if (apiUtils.isSuccess(response)) {
        const chatRoomData = apiUtils.getData(response);
        console.log("🔍 Chat room response:", response);
        console.log("🔍 Chat room data:", chatRoomData);
        console.log("🔍 Room ID:", chatRoomData?.roomId);
        
        if (chatRoomData?.roomId) {
          // Redirect to chat page with the created/found room
          window.location.href = `/chat?room=${chatRoomData.roomId}`;
        } else {
          console.error("No roomId in response");
          window.location.href = `/chat`;
        }
      } else {
        console.error("Failed to create chat room", response);
        // Fallback: redirect to general chat page
        window.location.href = `/chat`;
      }
    } catch (error) {
      console.error("Failed to start chat:", error);
      // Fallback: redirect to general chat page
      window.location.href = `/chat`;
    }
  };

  // useCallback handlers for UI interactions
  const handleSetGridView = useCallback(() => {
    setViewMode("grid");
  }, []);

  const handleSetListView = useCallback(() => {
    setViewMode("list");
  }, []);

  const handleToggleFilters = useCallback(() => {
    setShowFilters(!showFilters);
  }, [showFilters]);

  const createLikeHandler = useCallback((petId: string) => {
    return (e: React.MouseEvent) => handleToggleLike(petId, e);
  }, []);

  const createChatHandler = useCallback((petId: string, petName: string) => {
    return (e: React.MouseEvent) => handleStartChat(petId, petName, e);
  }, []);

  // Format time ago
  const formatTimeAgo = (dateString: string) => {
    const now = new Date();
    const date = new Date(dateString);
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);

    if (diffInSeconds < 60) return "방금 전";
    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)}분 전`;
    if (diffInSeconds < 86400)
      return `${Math.floor(diffInSeconds / 3600)}시간 전`;
    return `${Math.floor(diffInSeconds / 86400)}일 전`;
  };

  // Get urgency badge color
  const getUrgencyColor = (urgency: string) => {
    switch (urgency) {
      case "high":
        return "bg-red-500";
      case "medium":
        return "bg-yellow-500";
      default:
        return "bg-green-500";
    }
  };

  // Get urgency text
  const getUrgencyText = (urgency: string) => {
    switch (urgency) {
      case "high":
        return "긴급";
      case "medium":
        return "일반";
      default:
        return "여유";
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header with navigation */}
      <header className="bg-white border-b border-gray-100 sticky top-0 z-50">
        <div className="max-w-6xl mx-auto px-3 sm:px-4 lg:px-6">
          <div className="flex items-center justify-between h-14 sm:h-16">
            {/* Back button and title */}
            <div className="flex items-center min-w-0">
              <Link href="/" className="mr-2 sm:mr-4 p-2 hover:bg-gray-100 rounded-lg transition-colors flex items-center justify-center">
                <ArrowLeft className="h-4 w-4 sm:h-5 sm:w-5 text-gray-600" />
              </Link>
              <Link href="/" className="flex items-center space-x-1 sm:space-x-2">
                <Heart className="h-6 w-6 sm:h-8 sm:w-8 text-orange-500 flex-shrink-0" />
                <span className="text-base sm:text-xl font-bold text-gray-900 truncate">
                  <span className="hidden xs:inline">Companion Animals</span>
                  <span className="xs:hidden">반려동물</span>
                </span>
              </Link>
            </div>

            {/* View mode toggle - Only show on desktop */}
            <div className="hidden lg:flex items-center space-x-2">
              <button
                onClick={handleSetGridView}
                className={`p-2 rounded-lg transition-colors flex items-center justify-center ${
                  viewMode === "grid"
                    ? "bg-orange-100 text-orange-600"
                    : "text-gray-400 hover:text-gray-600"
                }`}
              >
                <Grid className="h-5 w-5" />
              </button>
              <button
                onClick={handleSetListView}
                className={`p-2 rounded-lg transition-colors flex items-center justify-center ${
                  viewMode === "list"
                    ? "bg-orange-100 text-orange-600"
                    : "text-gray-400 hover:text-gray-600"
                }`}
              >
                <List className="h-5 w-5" />
              </button>
            </div>
          </div>
        </div>
      </header>

      <div className="max-w-6xl mx-auto px-4 sm:px-6 py-6">
        {/* Search and filters */}
        <div className="mb-6">
          {/* Search bar */}
          <form onSubmit={handleSearch} className="mb-4">
            <div className="relative">
              <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
                <Search className="h-5 w-5 text-gray-400" />
              </div>
              <input
                type="text"
                value={searchQuery}
                onChange={(e) => setSearchQuery(e.target.value)}
                className="w-full pl-10 pr-4 py-3 border border-gray-300 rounded-xl focus:ring-2 focus:ring-orange-500 focus:border-orange-500 outline-none text-gray-900 placeholder-gray-500 bg-white"
                placeholder="Search for pets by name, breed, or location..."
              />
            </div>
          </form>

          {/* Filter toggle button */}
          <div className="flex items-center justify-between mb-4">
            <button
              onClick={handleToggleFilters}
              className="flex items-center space-x-2 px-4 py-2 border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors text-gray-700"
            >
              <Filter className="h-4 w-4" />
              <span>Filters</span>
              <ChevronDown
                className={`h-4 w-4 transition-transform ${
                  showFilters ? "rotate-180" : ""
                }`}
              />
            </button>

            {/* Results count */}
            <span className="text-sm text-gray-500">
              {pets.length} pets found
            </span>
          </div>

          {/* Filter panel */}
          {showFilters && (
            <div className="bg-white rounded-xl border border-gray-200 p-6 mb-6">
              <div className="grid grid-cols-2 md:grid-cols-4 gap-4">
                {/* Pet type filter */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Animal Type
                  </label>
                  <select
                    value={filters.type || "all"}
                    onChange={(e) => handleFilterChange("type", e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 outline-none text-gray-900 bg-white"
                  >
                    <option value="all">All Types</option>
                    <option value="cat">Cats</option>
                    <option value="dog">Dogs</option>
                    <option value="other">Others</option>
                  </select>
                </div>

                {/* Age filter */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Age
                  </label>
                  <select
                    value={filters.age || "all"}
                    onChange={(e) => handleFilterChange("age", e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 outline-none text-gray-900 bg-white"
                  >
                    <option value="all">All Ages</option>
                    <option value="baby">Baby</option>
                    <option value="young">Young</option>
                    <option value="adult">Adult</option>
                    <option value="senior">Senior</option>
                  </select>
                </div>

                {/* Size filter */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Size
                  </label>
                  <select
                    value={filters.size || "all"}
                    onChange={(e) => handleFilterChange("size", e.target.value)}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 outline-none text-gray-900 bg-white"
                  >
                    <option value="all">All Sizes</option>
                    <option value="small">Small</option>
                    <option value="medium">Medium</option>
                    <option value="large">Large</option>
                  </select>
                </div>

                {/* Sort by filter */}
                <div>
                  <label className="block text-sm font-medium text-gray-700 mb-2">
                    Sort By
                  </label>
                  <select
                    value={`${filters.sortBy}-${filters.sortOrder}`}
                    onChange={(e) => {
                      const [sortBy, sortOrder] = e.target.value.split("-");
                      setFilters((prev) => ({ ...prev, sortBy, sortOrder }));
                    }}
                    className="w-full px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-orange-500 focus:border-orange-500 outline-none text-gray-900 bg-white"
                  >
                    <option value="createdAt-desc">Latest</option>
                    <option value="createdAt-asc">Oldest</option>
                    <option value="views-desc">Most Viewed</option>
                    <option value="likes-desc">Most Liked</option>
                    <option value="urgency-desc">Most Urgent</option>
                  </select>
                </div>
              </div>
            </div>
          )}
        </div>

        {/* Pet listings */}
        {loading && pets.length === 0 ? (
          // Loading skeleton
          <div
            className={`grid gap-6 ${
              viewMode === "grid"
                ? "grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
                : "grid-cols-1"
            }`}
          >
            {Array.from({ length: 8 }).map((_, index) => (
              <div
                key={index}
                className="bg-white rounded-2xl overflow-hidden shadow-sm border border-gray-100"
              >
                <div className="aspect-square bg-gray-200 animate-pulse" />
                <div className="p-4 space-y-2">
                  <div className="h-4 bg-gray-200 rounded animate-pulse" />
                  <div className="h-3 bg-gray-200 rounded animate-pulse w-2/3" />
                  <div className="h-3 bg-gray-200 rounded animate-pulse w-1/2" />
                </div>
              </div>
            ))}
          </div>
        ) : pets.length === 0 ? (
          // Empty state
          <div className="text-center py-16">
            <div className="text-6xl mb-4">🐾</div>
            <h3 className="text-xl font-semibold text-gray-900 mb-2">
              No pets found
            </h3>
            <p className="text-gray-600 mb-6">
              Try adjusting your search filters or search terms
            </p>
            <Link
              href="/post-pet"
              className="inline-flex items-center px-6 py-3 bg-orange-500 text-white rounded-lg hover:bg-orange-600 transition-colors"
            >
              Post a Pet for Adoption
            </Link>
          </div>
        ) : (
          // Pet grid/list
          <div
            className={`grid gap-6 ${
              viewMode === "grid"
                ? "grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4"
                : "grid-cols-1"
            }`}
          >
{pets.map((pet) => (
              <>
                {/* Grid View - Always show on mobile, conditional on desktop */}
                <div
                  key={`${pet._id}-grid`}
                  className={`bg-white rounded-2xl overflow-hidden shadow-sm border border-gray-100 hover:shadow-lg transition-all ${
                    viewMode === "list" ? "lg:hidden" : ""
                  }`}
                >
                  {/* Pet image */}
                  <div className="relative aspect-square bg-gray-200">
                    {pet.images && pet.images.length > 0 ? (
                      <img
                        src={apiUtils.getImageUrl(pet.images[0])}
                        alt={pet.name}
                        className="w-full h-full object-cover"
                        onError={(e) => {
                          e.currentTarget.style.display = "none";
                          e.currentTarget.nextElementSibling?.classList.remove(
                            "hidden"
                          );
                        }}
                      />
                    ) : null}
                    {/* Placeholder for pet image */}
                    <div
                      className={`absolute inset-0 flex items-center justify-center text-gray-400 ${
                        pet.images?.length ? "hidden" : ""
                      }`}
                    >
                      <Heart className="h-12 w-12" />
                    </div>

                    {/* Urgency badge */}
                    {pet.urgency === "high" && (
                      <div className="absolute top-3 left-3">
                        <span
                          className={`${getUrgencyColor(
                            pet.urgency
                          )} text-white text-xs px-2 py-1 rounded-full font-medium`}
                        >
                          {getUrgencyText(pet.urgency)}
                        </span>
                      </div>
                    )}

                    {/* Like button */}
                    <button
                      onClick={createLikeHandler(pet._id)}
                      className="absolute top-3 right-3 p-2 bg-white/80 rounded-full hover:bg-white transition-colors flex items-center justify-center"
                    >
                      <Heart
                        className={`h-4 w-4 ${
                          pet.isLiked
                            ? "fill-red-500 text-red-500"
                            : "text-gray-600"
                        }`}
                      />
                    </button>
                  </div>

                  {/* Pet info */}
                  <div className="p-4">
                    <div className="flex items-start justify-between mb-2">
                      <h3 className="font-semibold text-gray-900 text-lg">
                        {pet.name}
                      </h3>
                      <span className="text-xs text-gray-500">
                        {formatTimeAgo(pet.createdAt)}
                      </span>
                    </div>

                    <p className="text-sm text-gray-600 mb-2">
                      {pet.breed} • {pet.age} • {pet.size}
                    </p>

                    <div className="flex items-center text-sm text-gray-500 mb-2">
                      <MapPin className="h-4 w-4 mr-1" />
                      <span>
                        {pet.location.district}, {pet.location.city}
                      </span>
                    </div>

                    <p className="text-sm text-gray-600 mb-3 line-clamp-2">
                      {pet.description}
                    </p>

                    <div className="flex items-center justify-between mb-3">
                      <span className="text-orange-500 font-semibold">
                        {pet.adoptionFee === 0
                          ? "무료분양"
                          : `₩${pet.adoptionFee.toLocaleString()}`}
                      </span>

                      <div className="flex items-center space-x-3 text-gray-400">
                        <div className="flex items-center">
                          <Eye className="h-4 w-4 mr-1" />
                          <span className="text-xs">{pet.views}</span>
                        </div>
                        <div className="flex items-center">
                          <Heart className="h-4 w-4 mr-1" />
                          <span className="text-xs">
                            {pet.likesCount || pet.likes?.length || 0}
                          </span>
                        </div>
                      </div>
                    </div>

                    {/* Action buttons */}
                    <div className="flex gap-2">
                      <Link
                        href={`/pets/${pet._id}`}
                        className="flex-1 bg-gray-100 text-gray-700 px-3 py-2 rounded-lg hover:bg-gray-200 transition-colors text-sm font-medium flex items-center justify-center"
                      >
                        상세보기
                      </Link>
                      <button
                        onClick={createChatHandler(pet._id, pet.name)}
                        className="flex-1 bg-orange-500 text-white px-3 py-2 rounded-lg hover:bg-orange-600 transition-colors text-sm font-medium flex items-center justify-center gap-1"
                      >
                        <MessageCircle className="h-4 w-4" />
                        채팅하기
                      </button>
                    </div>
                  </div>
                </div>
              ) : (
                // List View - Optimized Layout
                <div
                  key={pet._id}
                  className="bg-white rounded-2xl overflow-hidden shadow-sm border border-gray-100 hover:shadow-lg transition-all"
                >
                  <div className="flex flex-col sm:flex-row">
                    {/* Pet image - Mobile: full width, Desktop: fixed width */}
                    <div className="relative w-full sm:w-64 h-48 sm:h-40 flex-shrink-0 bg-gray-200">
                      {pet.images && pet.images.length > 0 ? (
                        <img
                          src={apiUtils.getImageUrl(pet.images[0])}
                          alt={pet.name}
                          className="w-full h-full object-cover"
                          onError={(e) => {
                            e.currentTarget.style.display = "none";
                            e.currentTarget.nextElementSibling?.classList.remove(
                              "hidden"
                            );
                          }}
                        />
                      ) : null}
                      {/* Placeholder for pet image */}
                      <div
                        className={`absolute inset-0 flex items-center justify-center text-gray-400 ${
                          pet.images?.length ? "hidden" : ""
                        }`}
                      >
                        <Heart className="h-12 w-12" />
                      </div>

                      {/* Urgency badge */}
                      {pet.urgency === "high" && (
                        <div className="absolute top-3 left-3">
                          <span
                            className={`${getUrgencyColor(
                              pet.urgency
                            )} text-white text-xs px-2 py-1 rounded-full font-medium`}
                          >
                            {getUrgencyText(pet.urgency)}
                          </span>
                        </div>
                      )}

                      {/* Like button */}
                      <button
                        onClick={createLikeHandler(pet._id)}
                        className="absolute top-3 right-3 p-2 bg-white/80 rounded-full hover:bg-white transition-colors flex items-center justify-center"
                      >
                        <Heart
                          className={`h-4 w-4 ${
                            pet.isLiked
                              ? "fill-red-500 text-red-500"
                              : "text-gray-600"
                          }`}
                        />
                      </button>
                    </div>

                    {/* Pet info - Better organized for list view */}
                    <div className="flex-1 p-4 sm:p-6">
                      <div className="flex flex-col h-full">
                        {/* Header section */}
                        <div className="flex flex-col sm:flex-row sm:items-start justify-between mb-3">
                          <div className="flex-1">
                            <h3 className="font-bold text-gray-900 text-xl mb-1">
                              {pet.name}
                            </h3>
                            <div className="flex flex-wrap items-center gap-2 text-sm text-gray-600 mb-2">
                              <span className="bg-blue-100 text-blue-800 px-2 py-1 rounded-full font-medium">
                                {pet.type === 'dog' ? '🐕 강아지' : pet.type === 'cat' ? '🐱 고양이' : '🐾 기타'}
                              </span>
                              <span className="text-gray-400">•</span>
                              <span>{pet.breed}</span>
                              <span className="text-gray-400">•</span>
                              <span>{pet.age}</span>
                              <span className="text-gray-400">•</span>
                              <span>{pet.size}</span>
                            </div>
                          </div>
                          <div className="flex flex-col items-end mt-2 sm:mt-0">
                            <span className="text-orange-500 font-bold text-lg mb-1">
                              {pet.adoptionFee === 0
                                ? "무료분양"
                                : `₩${pet.adoptionFee.toLocaleString()}`}
                            </span>
                            <span className="text-xs text-gray-500">
                              {formatTimeAgo(pet.createdAt)}
                            </span>
                          </div>
                        </div>

                        {/* Location */}
                        <div className="flex items-center text-sm text-gray-500 mb-3">
                          <MapPin className="h-4 w-4 mr-1 text-orange-500" />
                          <span className="font-medium">
                            {pet.location.district}, {pet.location.city}
                          </span>
                        </div>

                        {/* Description */}
                        <p className="text-sm text-gray-600 mb-4 flex-1 line-clamp-2 sm:line-clamp-3">
                          {pet.description}
                        </p>

                        {/* Bottom section */}
                        <div className="flex flex-col sm:flex-row items-start sm:items-center justify-between gap-3">
                          {/* Stats */}
                          <div className="flex items-center space-x-4 text-gray-400">
                            <div className="flex items-center">
                              <Eye className="h-4 w-4 mr-1" />
                              <span className="text-sm">조회 {pet.views}</span>
                            </div>
                            <div className="flex items-center">
                              <Heart className="h-4 w-4 mr-1" />
                              <span className="text-sm">
                                찜 {pet.likesCount || pet.likes?.length || 0}
                              </span>
                            </div>
                          </div>

                          {/* Action buttons */}
                          <div className="flex gap-2 w-full sm:w-auto">
                            <Link
                              href={`/pets/${pet._id}`}
                              className="flex-1 sm:flex-none bg-gray-100 text-gray-700 px-4 py-2 rounded-lg hover:bg-gray-200 transition-colors text-sm font-medium flex items-center justify-center min-w-[80px]"
                            >
                              상세보기
                            </Link>
                            <button
                              onClick={createChatHandler(pet._id, pet.name)}
                              className="flex-1 sm:flex-none bg-orange-500 text-white px-4 py-2 rounded-lg hover:bg-orange-600 transition-colors text-sm font-medium flex items-center justify-center gap-1 min-w-[80px]"
                            >
                              <MessageCircle className="h-4 w-4" />
                              채팅하기
                            </button>
                          </div>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>
              )
            )}
          </div>
        )}

        {/* Load more button */}
        {hasNextPage && !loading && (
          <div className="text-center mt-8">
            <button
              onClick={handleLoadMore}
              className="px-8 py-3 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 transition-colors font-medium"
            >
              Load More
            </button>
          </div>
        )}

        {/* Loading more indicator */}
        {loading && pets.length > 0 && (
          <div className="text-center mt-8">
            <div className="animate-spin rounded-full h-8 w-8 border-b-2 border-orange-500 mx-auto"></div>
          </div>
        )}
      </div>
    </div>
  );
}
